package session_transcript

import (
	"bytes"
	"testing"
)

func TestBrowserHandoverV1(t *testing.T) {
	nonce := []byte("testnonce")
	origin := "https://example.com"
	requesterIdHash := []byte("requesterIdHash")

	expectedOutput := []byte{
		0x83, 0xf6, 0xf6, 0x84, 0x71, 0x42, 0x72, 0x6f, 0x77, 0x73,
		0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72,
		0x76, 0x31, 0x49, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x6f, 0x6e,
		0x63, 0x65, 0x58, 0x31, 0xa3, 0x63, 0x63, 0x61, 0x74, 0x01,
		0x64, 0x74, 0x79, 0x70, 0x65, 0x01, 0x67, 0x64, 0x65, 0x74,
		0x61, 0x69, 0x6c, 0x73, 0xa1, 0x67, 0x62, 0x61, 0x73, 0x65,
		0x55, 0x72, 0x6c, 0x73, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
		0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x63, 0x6f, 0x6d, 0x4f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
		0x74, 0x65, 0x72, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68,
	}

	transcript, err := BrowserHandoverV1(nonce, origin, requesterIdHash)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	if !bytes.Equal(transcript, expectedOutput) {
		t.Errorf("expected %v, got %v", expectedOutput, transcript)
	}
}
